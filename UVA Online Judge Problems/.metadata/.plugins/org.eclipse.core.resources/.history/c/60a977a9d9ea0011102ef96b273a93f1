import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	static ArrayList<ArrayList<Integer>> intersections;
	static int [][] connections;
	static int [][] memory;
	public static void main(String [] args){
		Scanner input = new Scanner(System.in);
		while(input.hasNext()){
			int roads = input.nextInt();
			intersections = new ArrayList<ArrayList<Integer>>();
			for(int i = 0; i < roads; i++){
				int inter = input.nextInt();
				int connectTo = input.nextInt();
				
				while(Math.max(inter, connectTo) >= intersections.size() )
					intersections.add(new ArrayList<Integer>());
				
				intersections.get(inter).add(connectTo);
			}
			connections = new int[roads][roads];
			memory = new int[roads][roads];
			numPaths();
			System.out.println(intersections);

			for(int [] a : connections)
				printArray(a);
			
			for(int [] a : memory)
				printArray(a);
		}
	}
	static void numPaths(){
		for(int i = 0; i < intersections.size(); i++){
			numberPaths(i,i);
		}
	}
	public static void numberPaths(int pos, int x){
		if(pos != x)
			connections[pos][x] ++;
		
		if(connections[pos][pos] == -1)
			return;
		
		for(int i : intersections.get(x)){
			if(memory[i][x] >= 1){
				fillRow(i);
				fillRow(x);
				return;
			}
			if(i == pos){
				fillRow(i);
				fillRow(x);
				fillRow(pos);
				return;
			}
			memory[i][x] ++;
			numberPaths(pos, x);
			memory[i][x] --;
		}
	}
	static void inc(int i, int a){
		if(connections[i][a] != -1)
			connections[i][a]++;
	}
	static void fillRow(int r){
		for(int i = 0; i < connections[r].length; i++){
			connections[r][i] = -1;
		}
	}
	public static void printArray(int [] a){
		for (int  i : a)
			System.out.print(i+" ");
		System.out.print("\n");
	}
}
